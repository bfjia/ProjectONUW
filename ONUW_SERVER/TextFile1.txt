NewPlayer>Welcome...||NewUserReq
Start>Status:Ready||GameStarted
WaitingToStart>Status:Ready||GameStarted
getrole>$rolename
performRoleAction>$roleActionResults
wait>ok
vote>voted
waitingforvoteresults>keepwaiting|$MajorityVote

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Sockets;
using System.Net;
using System.Threading;

namespace WindowsFormsApplication1
{
    // State object for receiving data from remote device.
    public class StateObject
    {
        // Client socket.
        public Socket workSocket = null;
        // Size of receive buffer.
        public const int BufferSize = 256;
        // Receive buffer.
        public byte[] buffer = new byte[BufferSize];
        // Received data string.
        public StringBuilder sb = new StringBuilder();
    }

    public partial class ONUW_CLIENT : Form
    {
        // The port number for the remote device.
        private const int port = 11000;

        // ManualResetEvent instances signal completion.
        private static ManualResetEvent connectDone =
            new ManualResetEvent(false);
        private static ManualResetEvent sendDone =
            new ManualResetEvent(false);
        private static ManualResetEvent receiveDone =
            new ManualResetEvent(false);

        // The response from the remote device.
        private static String response = String.Empty;

        // Create a TCP/IP socket.
        Socket client = new Socket(AddressFamily.InterNetwork,
            SocketType.Stream, ProtocolType.Tcp);

        private void StartClient()
        {
            // Connect to a remote device.
            try
            {
                client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                // Establish the remote endpoint for the socket.
                // The name of the 
                // remote device is "host.contoso.com".
                textBox1.Text = "connecting to server..";
                IPHostEntry ipHostInfo = Dns.GetHostEntry("bfjia.net");
                IPAddress ipAddress = ipHostInfo.AddressList[0];
                IPEndPoint remoteEP = new IPEndPoint(ipAddress, port);

                // Connect to the remote endpoint.
                client.BeginConnect(remoteEP,
                    new AsyncCallback(ConnectCallback), client);
                connectDone.WaitOne();
                textBox1.Text = "connected to " + ipAddress.ToString() + ":" + port.ToString();

            }
            catch (Exception e)
            {
                MessageBox.Show(e.ToString());
            }
        }

        private void ConnectCallback(IAsyncResult ar)
        {
            try
            {
                // Retrieve the socket from the state object.
                Socket client = (Socket)ar.AsyncState;

                // Complete the connection.
                client.EndConnect(ar);

                MessageBox.Show("Socket connected to " + client.RemoteEndPoint.ToString());

                // Signal that the connection has been made.
                connectDone.Set();
            }
            catch (Exception e)
            {
                MessageBox.Show(e.ToString());
            }
        }

        private void Receive(Socket client)
        {
            try
            {
                // Create the state object.
                StateObject state = new StateObject();
                state.workSocket = client;

                // Begin receiving the data from the remote device.
                client.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,
                    new AsyncCallback(ReceiveCallback), state);
            }
            catch (Exception e)
            {
                MessageBox.Show(e.ToString());
            }
        }

        private void ReceiveCallback(IAsyncResult ar)
        {
            try
            {
                // Retrieve the state object and the client socket 
                // from the asynchronous state object.
                StateObject state = (StateObject)ar.AsyncState;
                Socket client = state.workSocket;

                // Read data from the remote device.
                int bytesRead = client.EndReceive(ar);

                if (bytesRead > 0)
                {
                    // There  might be more data, so store the data received so far.
                    state.sb.Append(Encoding.ASCII.GetString(state.buffer, 0, bytesRead));

                    // Check for end-of-file tag. If it is not there, read 
                    // more data.
                    string content = state.sb.ToString();
                    if (content.IndexOf("<EOF>") > -1)
                    {
                        // All the data has been read from the 
                        // client. Display it on the console.
                        textBox1.Text = ("Received: " + content);
                        // Echo the data back to the client.
                        receiveDone.Set();
                    }
                    else
                    {
                        // Not all data received. Get more.
                        client.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,
                            new AsyncCallback(ReceiveCallback), state);
                    }
                }
            }
            catch (Exception e)
            {
                MessageBox.Show(e.ToString());
            }
        }

        private void Send(Socket client, String data)
        {
            // Convert the string data to byte data using ASCII encoding.
            byte[] byteData = Encoding.ASCII.GetBytes(data);

            // Begin sending the data to the remote device.
            client.BeginSend(byteData, 0, byteData.Length, 0,
                new AsyncCallback(SendCallback), client);
        }

        private void SendCallback(IAsyncResult ar)
        {
            try
            {
                // Retrieve the socket from the state object.
                Socket client = (Socket)ar.AsyncState;

                // Complete sending the data to the remote device.
                int bytesSent = client.EndSend(ar);
               textBox1.Text = string.Format("Sent {0} bytes to server.", bytesSent.ToString());

                // Signal that all bytes have been sent.
                sendDone.Set();
            }
            catch (Exception e)
            {
                MessageBox.Show(e.ToString());
            }
        }

        public ONUW_CLIENT()
        {
            InitializeComponent();
        }

        private void ONUW_CLIENT_Load(object sender, EventArgs e)
        {
            Control.CheckForIllegalCrossThreadCalls = false;
            button1.Hide();
            button3.Hide();
        }

        private void button1_Click_1(object sender, EventArgs e) //connect
        {
            try
            {
                StartClient();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        private void button2_Click(object sender, EventArgs e) //send
        {
            try
            {
                StartClient();
                string sendText = textBox2.Text + "<EOF>";
                // Send test data to the remote device.
                textBox1.Text = "Sending Text...";
                Send(client, sendText);
                sendDone.WaitOne();
                // Receive the response from the remote device.
                Receive(client);
                receiveDone.WaitOne();
                textBox1.Text = "Closing connection to server...";
                client.Shutdown(SocketShutdown.Both);
                client.Close();
                textBox1.Text = "Connection Closed";

            }
            catch (Exception exc) { MessageBox.Show(exc.ToString()); }
        }

        private void button3_Click(object sender, EventArgs e) //close
        {
            try
            {
                // Release the socket.
                textBox1.Text = "Closing connection to server...";
                client.Shutdown(SocketShutdown.Both);
                client.Close();
                textBox1.Text = "Connection Closed";
            }
            catch (Exception exc) { MessageBox.Show(exc.ToString()); }
        }
    }
}
